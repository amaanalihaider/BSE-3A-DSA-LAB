#include <iostream>
#include <limits> // For numeric_limits
#include <cmath>  // For pow()
using namespace std;

class Node {
public:
    int coefficient;
    int exponent;
    Node* next;

    Node(int coeff, int exp) : coefficient(coeff), exponent(exp), next(nullptr) {}
};

class Polynomial {
private:
    Node* head;

    void insertInOrder(int coeff, int exp) {
        Node* newNode = new Node(coeff, exp);

        if (!head || head->exponent < exp) {
            newNode->next = head;
            head = newNode;
            return;
        }

        Node* current = head;
        Node* prev = nullptr;

        while (current && current->exponent > exp) {
            prev = current;
            current = current->next;
        }

        if (current && current->exponent == exp) {
            current->coefficient += coeff;
            if (current->coefficient == 0) {
                if (prev) prev->next = current->next;
                else head = current->next;
                delete current;
            }
            delete newNode;
        } else {
            if (prev) prev->next = newNode;
            newNode->next = current;
        }
    }

public:
    Polynomial() : head(nullptr) {}

    ~Polynomial() {
        while (head) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }

    void insertTerm(int coeff, int exp) {
        if (coeff != 0) insertInOrder(coeff, exp);
    }

    void display() const {
        if (!head) {
            cout << "0" << endl;
            return;
        }
        Node* current = head;
        while (current) {
            cout << (current->coefficient > 0 && current != head ? "+" : "")
                 << current->coefficient << "x^" << current->exponent;
            current = current->next;
        }
        cout << endl;
    }

    Polynomial operator+(const Polynomial& other) const {
        Polynomial result;
        Node* p1 = head;
        Node* p2 = other.head;

        while (p1 || p2) {
            if (p1 && (!p2 || p1->exponent > p2->exponent)) {
                result.insertTerm(p1->coefficient, p1->exponent);
                p1 = p1->next;
            } else if (p2 && (!p1 || p2->exponent > p1->exponent)) {
                result.insertTerm(p2->coefficient, p2->exponent);
                p2 = p2->next;
            } else {
                result.insertTerm(p1->coefficient + p2->coefficient, p1->exponent);
                p1 = p1->next;
                p2 = p2->next;
            }
        }
        return result;
    }

    Polynomial operator-(const Polynomial& other) const {
        Polynomial result;
        Node* p1 = head;
        Node* p2 = other.head;

        while (p1 || p2) {
            if (p1 && (!p2 || p1->exponent > p2->exponent)) {
                result.insertTerm(p1->coefficient, p1->exponent);
                p1 = p1->next;
            } else if (p2 && (!p1 || p2->exponent > p1->exponent)) {
                result.insertTerm(-p2->coefficient, p2->exponent);
                p2 = p2->next;
            } else {
                result.insertTerm(p1->coefficient - p2->coefficient, p1->exponent);
                p1 = p1->next;
                p2 = p2->next;
            }
        }
        return result;
    }

    Polynomial operator*(const Polynomial& other) const {
        Polynomial result;
        for (Node* p1 = head; p1; p1 = p1->next) {
            for (Node* p2 = other.head; p2; p2 = p2->next) {
                result.insertTerm(p1->coefficient * p2->coefficient, p1->exponent + p2->exponent);
            }
        }
        return result;
    }

    int evaluate(int x) const {
        int result = 0;
        Node* current = head;
        while (current) {
            result += current->coefficient * pow(x, current->exponent);
            current = current->next;
        }
        return result;
    }
};

int getValidatedInt(const string& prompt) {
    int value;
    while (true) {
        cout << prompt;
        cin >> value;
        if (cin.fail()) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << "Invalid input. Please enter an integer.\n";
        } else {
            break;
        }
    }
    return value;
}

void inputPolynomial(Polynomial& poly, const string& polyName) {
    int n = getValidatedInt("Enter the number of terms to add to " + polyName + ": ");
    for (int i = 0; i < n; ++i) {
        cout << "\nCurrent state of " << polyName << ": ";
        poly.display(); // Display polynomial before adding the term

        int coeff = getValidatedInt("Enter coefficient for term " + to_string(i + 1) + ": ");
        int exp = getValidatedInt("Enter exponent for term " + to_string(i + 1) + ": ");
        poly.insertTerm(coeff, exp);

        cout << "\nUpdated " << polyName << ": ";
        poly.display(); // Display polynomial after adding the term
    }
}


void menu() {
    Polynomial p1, p2;

    while (true) {
#ifdef _WIN32
        system("CLS"); // Clear screen for Windows
#else
        system("clear"); // Clear screen for Unix-like systems
#endif
        cout << "\n--- Polynomial Operations Menu ---\n";
        cout << "1. Add terms to Polynomial 1\n";
        cout << "2. Add terms to Polynomial 2\n";
        cout << "3. Display Polynomials\n";
        cout << "4. Add Polynomials\n";
        cout << "5. Subtract Polynomials\n";
        cout << "6. Multiply Polynomials\n";
        cout << "7. Evaluate a Polynomial\n";
        cout << "8. Exit\n";

        int choice = getValidatedInt("Enter your choice: ");

        switch (choice) {
        case 1:
            cout << "\nAdding terms to Polynomial 1:\n";
            inputPolynomial(p1, "Polynomial 1");
            break;
        case 2:
            cout << "\nAdding terms to Polynomial 2:\n";
            inputPolynomial(p2, "Polynomial 2");
            break;
        case 3:
            cout << "\nPolynomial 1: ";
            p1.display();
            cout << "Polynomial 2: ";
            p2.display();
            break;
        case 4: {
            Polynomial sum = p1 + p2;
            cout << "\nSum: ";
            sum.display();
            break;
        }
        case 5: {
            Polynomial diff = p1 - p2;
            cout << "\nDifference: ";
            diff.display();
            break;
        }
        case 6: {
            Polynomial prod = p1 * p2;
            cout << "\nProduct: ";
            prod.display();
            break;
        }
        case 7: {
            int polyChoice = getValidatedInt("Evaluate which polynomial (1 or 2)? ");
            int x = getValidatedInt("Enter the value of x: ");
            if (polyChoice == 1)
                cout << "Result: " << p1.evaluate(x) << endl;
            else if (polyChoice == 2)
                cout << "Result: " << p2.evaluate(x) << endl;
            else
                cout << "Invalid choice.\n";
            break;
        }
        case 8:
            cout << "Exiting program.\n";
            return;
        default:
            cout << "Invalid choice. Please try again.\n";
        }

        cout << "\nPress Enter to return to the menu...";
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        cin.get(); // Wait for user input
    }
}



int main() {
    menu();
    return 0;
}
