#include<iostream>
#include<string>
using namespace std;
    // template <typename T>
    // class Stack {
    //     T* arr;
    //     int size;
    //     int top;

    // public:
    //     // Constructor
    //     Stack(int size) {
    //         this->size = size;
    //         arr = new T[size];  
    //         top = -1; 
    //     }

    //     ~Stack() {
    //         delete[] arr;
    //     }

    //     bool isEmpty() {
    //         return top == -1;
    //     }

    //     bool isFull() {
    //         return top == size - 1;
    //     }

    //     void push(T element) {
    //         if (isFull()) {
    //             cout << "Stack Overflow" << endl;
    //         } else {
    //             arr[++top] = element;  
    //         }
    //     }

    //     void pop() {
    //         if (isEmpty()) {
    //             cout << "Stack is empty" << endl;
    //         } else {
    //             --top;  
    //         }
    //     }

    //     T getTop() {
    //         if (isEmpty()) {
    //             cout << "Stack is empty" << endl;
    //             return T();  
    //         } else {
    //             return arr[top];
    //         }
    //     }
    // };

// Stacks Implementation Using Arrays
template < class T > 
class Stack{
    public:
    // Properties
    T* arr;
    int top;
    int size;
    int data;


    // Constructor 
    public:
    Stack(int size){
        top = -1;
        arr = new T[size];
        this->data = data;
    }

//  All Stack Functions 
bool isEmpty(){
    if(top == -1){
        // Means Empty
        return true;
    }
    else{

        return false;
    }

}

bool isFull(){

    if(top == size -1 ){
        return true;
        
    }
    else {
        return false;
    }

}


// Push and Pop Functions 

void Push(T element){

// Base Case stack is full 

if(top == size - 1 ){

    cout << "Stack Overfull" <<endl;
}

// else if ( size - top > 1){

//     top++;
//     arr[top] = element;
// }

else{

    top++;
    arr[top] = element;
}

}

void pop() {
    
    if (top == -1) {
        cout << "Stack Underflow" << endl;
    } else {
       
        top--;
    }
}






};
template<class T>
int getSize(stack<T>s){
// base case
int count = 0;
if(s.empty()){

    return 0;
}
while(!(s.empty())){

    count++;
    s.pop();
}
return count;
}






int main(){


stack<int> s;
// s.push(1);
// s.push(1);
// s.push(1);
// s.push(1);

int answer = getSize(s);
cout<<answer;




    return 0;
}   
