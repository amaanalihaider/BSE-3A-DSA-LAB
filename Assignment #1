#include <iostream>
#include <vector>
#include <stack>
using namespace std;

// Implementing The Stack Class

// Implement an advanced stack that, along with the standard push() and pop() operations, supports:
// getMin(): Returns the minimum element in the stack in constant time.
// size(): Returns the number of elements in the stack.
// Requirements:
// The getMin() operation should work in O(1) time.
// You are not allowed to use any additional data structures like arrays or lists, except for the stack itself.
template<class T>
class Stack {
public:

    // properties 
    T* arr;
    int size;
    int top;
    stack<pair<T, T> > s;

    // Constructor 
public:
    Stack(int size) {
        this->size = size;
        arr = new T[size];
        this->top = -1;
    }

public:
    Stack() {}

    // functions
    // is Empty
    bool isEmpty() {
        if (top == -1) {
            return true;
        } else {
            return false;
        }
    }

    // is full
    bool isFull() {
        if (top == size - 1) {
            return true;
        } else {
            return false;
        }
    }

    // push element
  void push(T element) {
    if (!isFull()) {  
        if (s.empty()) {
            top++;
           arr[top] = element; 
            s.push(std::make_pair(element, element));
        } else {
            top++;
          arr[top] = element; 
            int currentMin = min(element, s.top().second);
            s.push(std::make_pair(element, currentMin));
        }
    } else {
        cout << "Stack Overflow" << endl;
    }
}

    int getMin() {
        if (s.empty()) {
            return -1;
        } else {
            return s.top().second;
        }
    }

   
   void pop() {
    if (top == -1) {
        cout << "Stack Underflow " << endl;
    } else {
        s.pop(); 
        top--;    
    }
}

public:
    int getSize() {
        return top + 1;
    }
};

// Bonus Task
vector<int> getGreaterElement(vector<int>& arr) {
    stack<int> s;
    vector<int> ans(arr.size());
    int current;

    for (int i = arr.size() - 1; i >= 0; i--) {
        current = arr[i];
        while (!s.empty() && s.top() <= current) {
            s.pop();
        }
        if (s.empty()) {
            ans[i] = -1;
        } else {
            ans[i] = s.top();
        }
        s.push(current);
    }
    return ans;
}



  int main() {

    vector<int> arr;
    arr.push_back(4);
    arr.push_back(5);
    arr.push_back(2);
    arr.push_back(25);

    vector<int> res = getGreaterElement(arr);
    cout << "The Next Greater Element stack is" << endl;
    for (int i = 0; i < res.size(); i++) {
        cout << res[i] << " ";
    }
    cout << endl;
    
    Stack<int> MyStack(10);  
    MyStack.push(1);
    MyStack.push(99);
    MyStack.push(-1);

    int min = MyStack.getMin();
    cout << "The Minimum Number is " << min << endl;

    int size = MyStack.getSize();
    cout << "The Size of the Stack is " << size << endl;

    cout << endl;

    MyStack.pop();
    int Newmin = MyStack.getMin();
    cout << "The Minimum Number is " << Newmin << endl;

    return 0;
}


