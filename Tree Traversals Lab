
// Basic to Hard Level Leetcode Questions

// Test Case 
//1 3 7 -1 -1 11 -1 -1 5 17 -1 -1 -1


//Implementing Trees ADT 
// Using Recursive solutions 


#include<iostream>
#include<queue>
#include<vector>
#include<map>
using namespace std;
class Node{
public:
// Properties
int data;
Node* left;
Node* right;

// Constructor 
Node(int data ){
    this -> data = data;

    // Initially Both pointing to  NULL
    this -> left = NULL;
    this -> right = NULL;

}
Node() {}

// BuildTREE

Node* buildTree(Node* root){
    cout<<" Enter the Root Node"<<endl;
    int data;
    cin >> data;
    


// Now the left part 
if(data == -1){

    return  NULL;
}
root = new Node(data);


cout<<"Enter the Left of the Root " << data <<endl;
root -> left = buildTree(root->left);

cout<<"Enter the Right of The Root " <<  data <<endl;
root->right = buildTree(root->right);

return root;
}



};
// Types of Traversals 
// Pre Order , in Order , post Order


void preOrderTraversal(Node* root ){
    // NLR
    // NODE LEFT RIGHT
    if(root == NULL){
        return ;
    }

    cout<< root -> data;
    preOrderTraversal(root->left);
    preOrderTraversal(root -> right);

}

void  inOrderTraversal(Node* root){
    // LNR 
    // Left Node Right
    if(root == NULL){
        return ;
    }
    inOrderTraversal(root->left);
    cout<< root->data ;
    inOrderTraversal(root->right);

}
void PostOrderTraversal(Node* root) {
    if (root == NULL) {
        return;
    }
    PostOrderTraversal(root->left);
    PostOrderTraversal(root->right);
    cout << root->data << " ";
}

// Level Order Traversal
void levelOrderTaraversal(Node* root){
    queue<Node*> q;
    // Adding a Seperator 
    q.push(root);
    // Adding A gap 
   
     q.push(NULL);
    

    while(!q.empty())
    {
    Node* temp = q.front();
   
    q.pop();

        if(temp == NULL) // Level complete hogya ha 
        {
            cout<<endl;
            if(!q.empty()){
                // Means Stil has Some Child Notes
                q.push(NULL);

            }
        }
    else{
         cout<<temp->data <<" ";
        if(temp->left)
        {
            q.push(temp->left);

        }
        if(temp->right){
                q.push(temp->right);
         }

    }
    }

}
// To calculate The Number of Lead Nodes in A Tree
void caclulateLeafNodes(Node* root,int &count){
    // Base Case
    if(root == NULL){
        return ;
    }

    caclulateLeafNodes(root->left,count);

   // Now check left and right of the Node

   if(root->left == NULL && root->right == NULL){
    // Means its a leaf Node
    count++;
   }
   // Warna right ki call krdo 
   caclulateLeafNodes(root->right,count);



}
int numberofLeafNodes(Node* root){

        int count = 0;
        caclulateLeafNodes(root,count);
        return count;
}


// Questions
// Height of the Tree   (( Eccentricity)
int heightofTree(Node* root){
    // Base Case 
    if(root == NULL){

        return 0;
    }
    int left  = heightofTree(root->left);
    int right = heightofTree(root->right);

    int ans = max(left,right) + 1;

    return ans;
}

// Diameter of the Tree
// Diameter of the Tree
// Diameter of the Tree
int diameterOfTree(Node* root){
    // Base Case
    if(root == NULL){
        return 0;
    }

    int leftHeight = heightofTree(root->left);
    int rightHeight = heightofTree(root->right);

    int leftDiameter = diameterOfTree(root->left);
    int rightDiameter = diameterOfTree(root->right);

    // First, get the diameter passing through the root
    int diameterThroughRoot = leftHeight + rightHeight + 1;

    // Now find the maximum of the three values
    int ans = max(diameterThroughRoot, max(leftDiameter, rightDiameter));

    return ans;
}

// Balanced tree or not
// According to The Question it is said to be balanced if the Height of the left subtree and right subtree has a difference <= 1 
// in Simple words height of left - height of right <= 1 else false 

// bool treeIsBalanced(Node* root){
//      if(root == NULL){

//         return true;
//     }
    
//     bool treeisBalanced(root->left);
//     bool treeisBalanced(root->right);

//     bool diff = abs(heightofTree(root->left ) - heightofTree(root->right) ) < = 1;
    

// }

// int treeIsBalanced(Node* root){
// // find the Height of the Tree
// // Only need to find if the height is  <= 1 or no Of left and right subtree i am Removing the Root node 
// int answer = heightofTree(root);
// int final_Answer = answer - 1;
// if(final_Answer<=1){
//     return true;
// }
// else{
//     return false;
// }

// }

// Identical Trees
bool checkisIdentical(Node* root1, Node* root2) {
    if (root1 == NULL && root2 == NULL) {
        return true;
    }
    if (root1 == NULL || root2 == NULL) {
        return false;
    }
    return (root1->data == root2->data) &&
           checkisIdentical(root1->left, root2->left) &&
           checkisIdentical(root1->right, root2->right);
}


// Sum Tree or Not


// Zigzag Traversal 




// Boundary Traversal

void traverseLeft(Node* root, vector<int>& ans) {
    if (root == NULL || (root->left == NULL && root->right == NULL)) {
        return;
    }

    ans.push_back(root->data);

    if (root->left != NULL) {
        traverseLeft(root->left, ans);
    } else {
        traverseLeft(root->right, ans);
    }
}

void traverseRight(Node* root, vector<int>& ans) {
    if (root == NULL || (root->right == NULL && root->left == NULL)) {
        return;
    }

    if (root->right != NULL) {
        traverseRight(root->right, ans);
    } else {
        traverseRight(root->left, ans);
    }

    // Add the node to the result after returning (reverse order for right boundary)
    ans.push_back(root->data);
}

void traverseLeafNodes(Node* root, vector<int>& ans) {
    if (root == NULL) {
        return;
    }

    if (root->left == NULL && root->right == NULL) {
        ans.push_back(root->data);
        return;
    }

    traverseLeafNodes(root->left, ans);
    traverseLeafNodes(root->right, ans);
}

vector<int> boundary(Node* root) {
    vector<int> ans;
    if (root == NULL) {
        return ans;
    }

    // Add the root node's data
    ans.push_back(root->data);


    // Traverse the left boundary (excluding leaf nodes)
    traverseLeft(root->left, ans);
 

    // Traverse all the leaf nodes
    traverseLeafNodes(root->left, ans);
    traverseLeafNodes(root->right, ans);


    // Traverse the right boundary (excluding leaf nodes, in reverse order)
    traverseRight(root->right, ans);

    return ans;
}
// vertial Order Traversal 
vector<int> verticalOrderTraversal(Node* root){
// Creating Vector for the Answer Vector 
vector<int> ans;
map<int, map<int,vector<int> > > nodes;
queue<pair < Node* , pair<int , int> > > q;


// check the Root
if(root == NULL){
    return ans;
}
q.push(make_pair(root,make_pair(0,0)));

while(!q.empty()){

pair<Node* , pair<int , int > > temp = q.front();
q.pop();

Node* frontNode = temp.first;
// Horizontal Distance 
int hd = temp.second.first;
// for each level
int lvl = temp.second.second;

nodes[hd][lvl].push_back(frontNode->data);
if(frontNode->left){
    q.push(make_pair(frontNode->left,make_pair(hd-1,lvl+1)));
}
if(frontNode->right){
    q.push(make_pair(frontNode->right,make_pair(hd+1,lvl+1)));
}

}
    for(auto i: nodes){
        for(auto j:i.second){
            for(auto k:j.second){
                ans.push_back(k);
            }
        }

    }

    return ans;
}

// Top View

vector<int> topView(Node* root) {
    // To store the answer
    vector<int> ans;

    // Map to store the first node's data at each horizontal distance (HD)
    map<int, int> topNode;

    // Queue to perform level-order traversal, storing nodes and their HD
    queue<pair<Node*, int> > q;

    // Null check for root
    if (root == NULL) {
        return ans;
    }

    // Push the root node with horizontal distance 0
    q.push(make_pair(root, 0));

    while (!q.empty()) {
        pair<Node*, int> temp = q.front();
        q.pop();

        Node* frontNode = temp.first;
        int hd = temp.second;

       
        if (topNode.count(hd) == 0) {
            topNode[hd] = frontNode->data;
        }

        // Push the left child with HD - 1
        if (frontNode->left) {
            q.push(make_pair(frontNode->left, hd - 1));
        }

        // Push the right child with HD + 1
        if (frontNode->right) {
            q.push(make_pair(frontNode->right, hd + 1));
        }
    }

    // Store the result in the answer vector in sorted order of HD
    for (auto i : topNode) {
        ans.push_back(i.second);
    }

    return ans;
}

// Bottom view 

vector<int> bottomView(Node* root) {
    // To store the answer
    vector<int> ans;

    // Map to store the first node's data at each horizontal distance (HD)
    map<int, int> topNode;

    // Queue to perform level-order traversal, storing nodes and their HD
    queue<pair<Node*, int> > q;

    // Null check for root
    if (root == NULL) {
        return ans;
    }

    // Push the root node with horizontal distance 0
    q.push(make_pair(root, 0));

    while (!q.empty()) {
        pair<Node*, int> temp = q.front();
        q.pop();

        Node* frontNode = temp.first;
        int hd = temp.second;

       
      
            topNode[hd] = frontNode->data;
        

        // Push the left child with HD - 1
        if (frontNode->left) {
            q.push(make_pair(frontNode->left, hd - 1));
        }

        // Push the right child with HD + 1
        if (frontNode->right) {
            q.push(make_pair(frontNode->right, hd + 1));
        }
    }

    // Store the result in the answer vector in sorted order of HD
    for (auto i : topNode) {
        ans.push_back(i.second);
    }

    return ans;
}

// Right view 
void solveRightView(Node* root, vector<int>& ans, int level) {
    if (root == NULL) {
        return;
    }
    if (level == ans.size()) {
        ans.push_back(root->data);
    }
    solveRightView(root->right, ans, level + 1);
    solveRightView(root->left, ans, level + 1);
}

vector<int> rightView(Node* root) {
    vector<int> ans;
    solveRightView(root, ans, 0);
    return ans;
}

// Left view 
void solveleftView(Node*root,vector<int>&ans,int level){
    if(root == NULL){
        return;
    }
    if(level == ans.size()){
        ans.push_back(root->data);
    }
    // now Just call the left and right Recusrisvely 

    solveleftView(root->left,ans,level+1);
    solveleftView(root->right,ans,level+1);



}
vector<int> leftView(Node* root){
    vector<int> ans;
    if(root == NULL){
        return ans;
    }

    solveleftView(root,ans,0);
    return ans;

}


// Diagnal Traversal

// Sum of Longest BloodLine
// LCA of Binary Tree
// K Sum paths
// Kth Ancestor:
// Max Sum of Non-Adjacent Nodes:


// Construct a BT from Inorder/PreOrder traversal: https://practice.geeksforgeeks.org/pr...
 // Construct a BT from PreOrder/PostOrder traversal:https://practice.geeksforgeeks.org/pr...


// 3 Question SKIPPED 








// BST 
// Binary Search Trees

Node* insertIntoBST(Node* root, int data) {
    cout << "Inserting: " << data << endl;
    if (root == NULL) {
        cout << "Creating new node for: " << data << endl;
        return new Node(data);
    }
    if (data < root->data) {
        root->left = insertIntoBST(root->left, data);
    } else {
        root->right = insertIntoBST(root->right, data);
    }
    return root;
}

Node* takeInput(Node* root) {
    int data;
    cin >> data;
    while (data != -1) {
        root = insertIntoBST(root, data); // Update root
        cin >> data;
    }
    return root;
}

// Search In A BST


bool searchInBST(Node* root, int data) {
    if (root == NULL) {
        return false;
    }
    if (root->data == data) {
        return true;
    } else if (data < root->data) {
        return searchInBST(root->left, data);
    } else {
        return searchInBST(root->right, data);
    }
}

// Min and Max Value Functios 
Node* minValue(Node* root) {    
    if (root == nullptr) {
        return nullptr; // Handle null root
    }
    while (root->left != nullptr) {
        root = root->left;
    }
    return root;
}

void  maxValue(Node* root){

 Node* temp = root;
    while(temp -> right != NULL){
        temp = temp->right;
    } 
    cout << " The Minimum Valiue is " << temp->data;
}

// Deleting A Node In BST 
Node* deleteInBST(Node* root, int data) {
    if (root == NULL) {
        return NULL;
    }

    if (root->data == data) {
        // 0 child 
        if (root->left == NULL && root->right == NULL) {
            delete root;
            return NULL;
        }

        // 1 child 
        if (root->left == NULL && root->right != NULL) {
            Node* temp = root->right; // Corrected to assign `root->right`
            delete root;
            return temp;
        }

        if (root->right == NULL && root->left != NULL) {
            Node* temp = root->left; // Corrected to assign `root->left`
            delete root;
            return temp;
        }

        // 2 children
        if (root->left != NULL && root->right != NULL) {
            int mini = minValue(root->right)->data;
            root->data = mini;
            root->right = deleteInBST(root->right, mini);
            return root;
        }
    } 
    else if (data < root->data) {
        root->left = deleteInBST(root->left, data);
        return root;
    } 
    else {
        root->right = deleteInBST(root->right, data);
        return root;
    }
    return root;
}

// Video 72 BST 

// TWO SUM BST PROBLEM 
// pushing it In Vector

void inOrder(Node* root , vector<int> &in){

    if(root == NULL){
        return ;
    }

    inOrder(root->left,in);
    in.push_back(root->data);
    inOrder(root->right,in);
}


void twoSumBST(Node* root , int target ){

vector<int> inOrderVal;

// Calling Functions 
inOrder(root,inOrderVal);


// Since We have it in IN order traversed 

int i = 0; 
int j = inOrderVal.size() - 1;
int sum = 0;

while ((i<j))
{

    sum = inOrderVal[i] + inOrderVal[j];

    if(sum == target){
        cout << " The Sum is Present " << inOrderVal[i] << " + " << inOrderVal[j] << " = " << sum << endl;
        break;
    }
    else if(sum > target){
        j--;
    }
    else if(sum < target){ 
        i++;
    }
    else{
        cout << " The Sum of Two Wasnt Found " << endl;
    }
    
}    
}
// Flatten A BST to A Sorted List 
// By Following the Property of the BST in INORDER TRAVERSAL We get the tree in Sorted Order
void inOrderTree(Node* root, vector<int> in){
    if(root == NULL){
        return ;
    }

    inOrderTree(root->left,in);
    in.push_back(root->data);
    inOrderTree(root->right,in);


}


void flattenTreeIntoList(Node* root){

vector<int> inOrderVal;

inOrderTree(root,inOrderVal);
// Here We have the Tree in Order Val

Node* newRoot = new Node(inOrderVal[0]);
int size = inOrderVal.size();
Node* current = newRoot;

for(int i = 0; i< size; i ++){

    Node* temp = new Node(inOrderVal[i]);
    current->left = NULL;
    current->right = temp;
    current = temp;

}
    // out of the Loop means here we are at the end of the Vector make the last elements left and right NULL
    current -> left = NULL;
    current -> right = NULL;

}


//Create A BST from a PreOrder 
// Multiple Approachers 
// Approach # 1 

// Convert It Into INorder and then Just build a tree
// To make a Tree in O(N)

// Solving through Recursion 
Node* solve(vector<int> &preOrder, int mini  , int max, int &i)  
{
    // Writing NULL conditions 
    if(i>= preOrder.size()){
        return NULL;
    }
    if(preOrder[i] < mini || preOrder[i] > max){
        return NULL;
    }

    Node* root = new Node(preOrder[i++]);
    root->right = solve(preOrder,mini,root->data,i);
    root->left = solve(preOrder,root->data,max,i);
    return root;

}

Node* preOrdertoBST(vector<int> &preOrder)
{
int mini = INT_MIN;
int max = INT_MAX;
int i = 0;
return solve(preOrder,mini,max,i);
}





int main(){
    Node* root = NULL;


    // Test case 10 8 21 7 27 5 4 3 -1 
    cout << " Enter data to Create BST " << endl;
     root = takeInput(root);


    cout<< " Printing the BST Tree" <<  endl;
    levelOrderTaraversal(root);

cout<< " Searching in BST" << endl;
if (searchInBST(root, 20)) {
    cout << "Found" << endl;
} else {
    cout << "Not Found" << endl;
}


    cout<< "InOrder Traversal " << endl;
    inOrderTraversal(root);
    cout<< endl;

    minValue(root);
    maxValue(root);
    

    cout<< " Deleting 3 here " << endl;
    root = deleteInBST(root,3);


    cout<< "InOrder Traversal " << endl;
    inOrderTraversal(root);
    cout<< endl;


  
    cout << " TWO Sum BST " << endl;
    twoSumBST(root , 25);
    cout << endl;
    // root = root->buildTree(root);

    // cout << "InOrder traversal is " << endl;
    // inOrderTraversal(root);
    // cout << endl;
    
    // cout << "The Pre Order Traversal is " << endl;
    // preOrderTraversal(root);
    // cout << endl;

    // cout << "The Post Order traversal is " << endl;
    // PostOrderTraversal(root);
    // cout << endl;

    // cout << "Level Order Traversal is " << endl;
    // levelOrderTaraversal(root);
    
    // // Calculate the number of leaf nodes
    // int leafCount = numberofLeafNodes(root);
    // cout << "The Number of Leaf Nodes is " << leafCount << endl;

    // // Calculate the height of the tree
    // int height = heightofTree(root);
    // cout << "The Height of the Tree is " << height << endl;

    // // Calculate the diameter of the tree
    // int diameter = diameterOfTree(root);
    // cout << "The Diameter of the Tree is " << diameter << endl;

    // if(treeIsBalanced(root)){
    //     cout<<"its a Balanced Tree"<<endl;
    // }
    // else {
    //     cout<<"Its Not A Balanced Tree"<<endl;
    // }


    return 0;  
}
