#include <iostream>
#include <exception>
#include <string>
#include <limits>

using namespace std;

class Node {
    string data;  
    int priority;  

public:
    Node* next;

    Node() : next(nullptr) {}
    Node(const string& data, int priority) {
        this->data = data;
        this->priority = priority;
        this->next = nullptr;
    }

  
    void setData(const string& data) {
        this->data = data;
    }
    string getData() const {
        return data;
    }

    void setPriority(int priority) {
        this->priority = priority;
    }
    int getPriority() const {
        return priority;
    }
};


void enqueue(Node*& head, const string& data, int priority);
Node* pop(Node* head);
string peek(Node* head);
bool isEmpty(Node* head);
int getSize(Node* head);
Node* clear(Node* head);
int changeNodePriority(Node*& head, const string& data, int newPriority);
int searchData(Node* head, const string& data);
void printQueue(Node* head);
int getUserChoice();

int main() {
    Node* pq = nullptr;
    int choice;
    string data;
    int priority;

    do {
        cout << "\nMenu:\n";
        cout << "1. Enqueue\n";
        cout << "2. Dequeue\n";
        cout << "3. Peek\n";
        cout << "4. Check if empty\n";
        cout << "5. Get size\n";
        cout << "6. Change node priority\n";
        cout << "7. Print queue\n";
        cout << "8. Clear queue\n";
        cout << "0. Exit\n";
        choice = getUserChoice();

        switch (choice) {
            case 1: // Enqueue
                cout << "Enter data (string): ";
                cin >> data;
                cout << "Enter priority: ";
                while (!(cin >> priority)) {
                    cin.clear(); 
                    cin.ignore(numeric_limits<streamsize>::max(), '\n'); 
                    cout << "Invalid input! Please enter a valid integer for priority: ";
                }
                enqueue(pq, data, priority);
                cout << "Inserted " << data << " with priority " << priority << endl;
                break;

            case 2: 
                if (isEmpty(pq)) {
                    cout << "Queue is empty. Cannot dequeue." << endl;
                } else {
                    cout << "Dequeued: " << peek(pq) << endl;
                    pq = pop(pq);
                }
                break;

            case 3: 
                if (isEmpty(pq)) {
                    cout << "Queue is empty." << endl;
                } else {
                    cout << "Front element: " << peek(pq) << endl;
                }
                break;

            case 4: 
                cout << (isEmpty(pq) ? "Queue is empty." : "Queue is not empty.") << endl;
                break;

            case 5: // Get size
                cout << "Queue size: " << getSize(pq) << endl;
                break;

            case 6: 
                cout << "Enter the data of the node to change priority: ";
                cin >> data;
                cout << "Enter new priority: ";
                while (!(cin >> priority)) {
                    cin.clear(); 
                    cin.ignore(numeric_limits<streamsize>::max(), '\n'); 
                    cout << "Invalid input! Please enter a valid integer for priority: ";
                }
                if (changeNodePriority(pq, data, priority) == 1) {
                    cout << "Priority updated successfully." << endl;
                } else {
                    cout << "Priority update failed. Node not found." << endl;
                }
                break;

            case 7: 
                cout << "Current queue: ";
                printQueue(pq);
                break;

            case 8: // Clear queue
                pq = clear(pq);
                cout << "Queue cleared." << endl;
                break;

            case 0: // Exit
                cout << "Exiting the program." << endl;
                break;

            default:
                cout << "Invalid choice." << endl;
        }
    } while (choice != 0);

 
    pq = clear(pq);
    return 0;
}

// Function Definitions
void enqueue(Node*& head, const string& data, int priority) {
    Node* temp = new Node(data, priority);

   
    if (head == nullptr || head->getPriority() < priority) {
        temp->next = head;
        head = temp;
    } else {
        Node* forward = head;
        // Find the correct position for the new node
        while (forward->next != nullptr && forward->next->getPriority() > priority) {
            forward = forward->next;
        }
        temp->next = forward->next;
        forward->next = temp;
    }
}

Node* pop(Node* head) {
    if (head == nullptr) return nullptr; // Check for empty queue

    Node* temp = head;
    head = head->next;
    delete temp;
    return head;
}

string peek(Node* head) {
    if (head != nullptr) {
        return head->getData();
    }
    return "Queue is empty.";
}

bool isEmpty(Node* head) {
    return head == nullptr;
}

int getSize(Node* head) {
    int size = 0;
    while (head != nullptr) {
        size++;
        head = head->next;
    }
    return size;
}

Node* clear(Node* head) {
    while (head != nullptr) {
        Node* temp = head;
        head = head->next;
        delete temp;
    }
    return nullptr;
}

int changeNodePriority(Node*& head, const string& data, int newPriority) {
    if (head == nullptr) {
        cout << "Queue is empty." << endl;
        return -1;
    }

    Node* current = head;
    Node* prev = nullptr;

    // Search for the node by data
    while (current != nullptr && current->getData() != data) {
        prev = current;
        current = current->next;
    }

    if (current == nullptr) {
        cout << "Node not found." << endl;
        return -1;
    }

    // Remove the node from the queue
    if (prev == nullptr) {
        head = head->next; // Change head if the current node is the first
    } else {
        prev->next = current->next; // Bypass the current node
    }
    current->next = nullptr; // Detach the node

    // Update the priority
    current->setPriority(newPriority);
    enqueue(head, current->getData(), newPriority); // Reinsert the node
    return 1; // Success
}

int searchData(Node* head, const string& data) {
    if (head == nullptr) {
        cout << "Element not found." << endl;
        return -1;
    }
    if (head->getData() == data) {
        return 0; // Found at head
    } else {
        Node* temp = head;
        while (temp != nullptr) {
            if (temp->getData() == data) {
                return 0; // Found in the list
            }
            temp = temp->next;
        }
    }
    cout << "Element not found." << endl;
    return -1; // Not found
}

void printQueue(Node* head) {
    if (isEmpty(head)) {
        cout << "Queue is empty." << endl;
        return;
    }
    while (head != nullptr) {
        cout << head->getData() << " (Priority: " << head->getPriority() << ") ";
        head = head->next;
    }
    cout << endl;
}

int getUserChoice() {
    int choice;
    cout << "Enter your choice: ";
    while (!(cin >> choice) || choice < 0 || choice > 8) {
        cin.clear(); // Clear the error flag
        cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Discard invalid input
        cout << "Invalid choice! Please enter a number between 0 and 8: ";
    }
    return choice;
}
